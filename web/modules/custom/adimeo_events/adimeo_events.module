<?php

/**
 * @file
 * Primary module hooks for adimeo events module.
 */

declare(strict_types = 1);

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function adimeo_events_preprocess_node(array &$variables): void {
  if ($variables['view_mode'] === 'full') {
    /** @var \Drupal\adimeo_events\Service\AdimeoEventsHelper $adimeo_events_helper */
    $adimeo_events_helper = Drupal::service('adimeo_events.helper');
    $variables['preprocess_events_list_block'] = $adimeo_events_helper->getPluginBlock('adimeo_events_list_block');
  }
}

/**
 * Implements hook_cron().
 */
function adimeo_events_cron(): void {
  $current_datetime = DrupalDateTime::createFromDateTime(new \DateTime('now'));
  $current_date_formatted = $current_datetime->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  try {
    $query = Drupal::entityTypeManager()->getStorage('node')->getQuery()
      ->accessCheck(TRUE)
      ->latestRevision()
      ->condition('type', 'event')
      ->condition('status', 1)
      ->condition('field_date_end.value', $current_date_formatted, '<=');
    $nids = $query->execute();

    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
    $queue_factory = \Drupal::service('queue');
    $queue = $queue_factory->get('adimeo_events_unpublished');

    foreach ($nids as $nid) {
      $node = Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $queue->createItem($node);
    }
  }

  catch (InvalidPluginDefinitionException | PluginNotFoundException $e) {
    \Drupal::logger('adimeo_events')->error($e->getMessage());
  }
}
